<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Admin extends CI_Controller {

	private $data;

	function __construct()
	{
		parent::__construct();
		$this->load->model('Users_model','',TRUE);
		$this->Users_model->loginCheck();
		$this->Users_model->adminCheck();

		$this->load->model('Email_model','',TRUE);
		$this->load->model('Submit_model','',TRUE);
		$this->load->model('Assessment_model','',TRUE);
		$this->load->model('Projects_model','',TRUE);
		$this->load->model('Submit_model','',TRUE);
		$this->load->model('System_model','',TRUE);
		$this->load->model('Skills_model','',TRUE);
		$this->load->model('Terms_model','',TRUE);
		$this->load->model('Classes_model','',TRUE);
		$this->load->model('Results_model','',TRUE);
		$this->load->model('Grade_model','',TRUE);
		$this->load->helper('school');

		if($this->config->item('mode') === 'development')
		{
			$this->output->enable_profiler(TRUE);
		}

		$this->data['classes'] = $this->Classes_model->getAllClasses();
		$this->data['terms'] = $this->Terms_model->getAll();

		if($this->input->get('school_year'))
		{
			$this->school_year = $this->input->get('school_year');
		}
		else
		{
			$this->school_year = get_school_year();
		}
		$this->data['school_years'] = $this->Projects_model->getSchoolYears();
	}

	public function index()
	{
//		dump(

		redirect('admin/dashboard?school_year=' . get_school_year());
	}






	/**
	 *
	 *		PROJECTS MANAGEMENT PAGE
	 *
	 */
	public function project_management($project_id = FALSE)
	{
		// Models
		$this->load->model('Assessment_model','',TRUE);
		$this->load->model('ProjectsManager_model','',TRUE);
		$this->load->model('Terms_model','',TRUE);
		$this->load->model('Comments_model','',TRUE);
        $this->load->model('FilesFormat_model','',TRUE);
		$this->load->model('Achievements_model','',TRUE);
		$this->load->model('Skills_model','',TRUE);

		// TODO : control for empty fields

		// GET
		if( ! $this->input->post())
		{
			// GET data from argument (to get project info)
			if($project_id)
			{
				$this->data['curr_project'] = $this->Projects_model->getProjectDataByProjectId($project_id);
				$this->data['active_skills'] = $this->Skills_model->getAllSkillsByProjects($project_id, TRUE);
				$this->data['assessment_table'] = $this->Assessment_model->getAssessmentsByProjectId($project_id, TRUE);
				$this->data['active_self_assessments'] = $this->Assessment_model->getSelfAssessmentIdsByProject($project_id);
			}
			else
			{
				// user wants to create a new empty project
				$this->data['assessment_table'] = array(new Assessment_model);
			}

			// Get data
			$this->data['achievements'] = $this->Achievements_model->getAllAchievements();
			$this->data['file_formats'] = $this->FilesFormat_model->getAllDistinctFormats();
			$this->data['projects'] = $this->Projects_model->getAllActiveProjectsByAdmin(FALSE);
			$this->data['skills'] = $this->Skills_model->getAllSkills();
			$this->data['self_assessments'] = $this->Assessment_model->getAllSelfAssessments();
			$this->data['skills_groups'] = $this->Skills_model->getAllSkillsGroups();

			$this->load->helper('text');
			$this->load->helper('deadline');
			$this->load->template('admin/project_management', $this->data, TRUE);
		}
		else // POST ACTION
		{
			if($this->input->post('disactivate_project'))
			{
				$this->ProjectsManager_model->switchProjectState($this->input->post('disactivate_project'));
			}
			elseif($this->input->post('delete_project'))
			{
				$this->ProjectsManager_model->deleteProject($this->input->post('delete_project'));
				redirect('/admin/projects');
			}
			// ADD or UPDATE PROJECT
			elseif($this->input->post('save_project') || $this->input->post('update_project'))
			{

				/**
				 * HYDRATE SELF ASSESSEMENTS
				 */

				// saves NEWS self-assessments
				$self_assessment_ids = array();

				if ($this->input->post('new_self_assessment')[0])
				{
					foreach($this->input->post('new_self_assessment') as $row)
					{
						array_push($self_assessment_ids, $this->Assessment_model->addSelfAssessment($row));
					}
				}
				// adds SELECTED self-assessements
				if ($this->input->post('self_assessment_id'))
				{
					foreach($this->input->post('self_assessment_id') as $row)
					{
						array_push($self_assessment_ids, $row);
					}
				}

				/**
				 * HYDRATE PROJECT
				 */
				$project = array(
					'id' 					=> $this->input->post('project_id'),
					'project_name' 			=> $this->input->post('project_name'),
					'assessment_type' 		=> $this->input->post('assessment_type'),
					'term' 					=> $this->input->post('term'),
					'class' 				=> $this->input->post('class'),
					'deadline' 				=> $this->input->post('deadline'),
					'start_date'			=> $this->input->post('start_date'),
					'school_year'			=> get_school_year(),
					'skill_ids' 			=> implode(',', $this->input->post('seen_skill_ids')),
					'material'				=> $this->input->post('material'),
					'extension' 			=> $this->input->post('extension'),
					'instructions_txt' 		=> serialize(array(
												'instructions'  => $this->input->post('instructions_txt'),
												'context'		=>  $this->input->post('context_txt')
												)),
					'number_of_files'		=> $this->input->post('number_of_files'),
					'self_assessment_ids' 	=> implode(',', $self_assessment_ids),
					'is_activated' 			=> '1',
					'admin_id'				=> $this->session->id
					);

				/**
				 * SAVE PROJECT
				 */
				if($this->input->post('save_project'))
				{
					$project_id = $this->ProjectsManager_model->addProject($project);
				}
				elseif ($this->input->post('update_project'))
				{
					$project_id = $this->ProjectsManager_model->updateProject($project);
				}

				/**
				 * SAVE ASSESSMENTS
				 */
				if($this->config->item('assessment_mode') === 'skills_group')
				{
					$skills = $this->input->post('skills_groups');
				}
				else
				{
					$skills = $this->input->post('skill_ids');
				}

				foreach($skills as $key => $skill_id)
				{
					if( ! $this->config->item('assessment_mode') === 'skills_group')
					{
						$_POST['skills_groups'][$key] = $this->Skills_model->getSkillGroupsFromSkillId($skill_id);
					}

					$assessment = array(
						'id' => $this->input->post('assessment_id')[$key],
						'skills_group' => $this->input->post('skills_groups')[$key],
						'skill_id' => $this->input->post('skill_ids')[$key],
						'criterion' => $this->input->post('criterion')[$key],
						'cursor' => $this->input->post('cursor')[$key],
						'max_vote' => $this->input->post('max_vote')[$key],
						'achievement_id' => $this->input->post('achievement_id')[$key],
						);
					if($this->input->post('assessment_id')[$key])
					{
						$assessment_id = $this->Assessment_model->updateAssessment($assessment);
					}
					else
					{
						$assessment_id = $this->Assessment_model->addAssessment($assessment);
						$this->Assessment_model->addProjects_Assessments($project_id, $assessment_id);
					}
				}

	            // Save & upload (or not) PDF instructions
				if(@$_FILES['instructions_pdf']['size'] > 0)
					$post['instructions_pdf'] = $this->uploadPDF($post);
				else
					$post['instructions_pdf'] = FALSE;
				redirect('/admin/projects?school_year=' . get_school_year());
			}
		}
	}


	private function uploadPDF($data = array())
	{

		$class = $data['class'];
		$term = $data['term'];
		$project_name = $data['project_name'];

		$config = $this->ProjectsManager_model->getUploadPDFConfig($class, $term, $project_name);
		$error = $this->ProjectsManager_model->uploadPDF($config, 'instructions_pdf');

		if (isset($error['error']))
		{
			show_error($error['error']);
		}
		else
		{
			return $config['file_db_path'] . $config['file_name'] . '.pdf';
		}
	}







	public function achievements($action = FALSE)
	{
		$this->load->model('Achievements_model','',TRUE);

		if($action)
		{
			$data = array(
				'id' 			=> $this->input->post('id'),
				'name' 			=> $this->input->post('name'),
				'description' 	=> $this->input->post('description'),
				'icon' 			=> $this->input->post('icon'),
				'star'			=> $this->input->post('star')
				);

			switch($action)
			{
				case 'add':
					$this->Achievements_model->add($data);
					break;

				case 'update':
					$this->Achievements_model->update($data);
					break;

				case 'delete':
					$this->Achievements_model->delete($data['id']);
					break;

				case 'reward':
					$this->_achievement_reward();
					break;
			}
		}

		// GET
		$this->data['achievements'] = $this->Achievements_model->getAllAchievements();
		$this->load->template('admin/achievements', $this->data);
	}

	/**
	*** TODO NEEDS SEVERE OPTIMIZATION
	**/
	private function _achievement_reward()
	{
		// get all projects with assessment
		$projects_achievements = $this->Achievements_model->getAllAchievementsByProject(FALSE, $group = FALSE);
		$eligible_users = array();
		$results = array();

		// $results[USER_ID][ACHIEVEMENT_ID]
		foreach ($projects_achievements as $achievement)
		{
			$tmp_results = $this->Results_model->getResultsByAssessmentId(FALSE, FALSE, $achievement->assessment_id);

			$i = 0;
			foreach ($tmp_results as $row)
			{
				$results[$row->user_id][$achievement->achievement_id][$row->assessment_type][] = array(	'user_id' => $row->user_id,
																				'achievement_id' => $achievement->achievement_id,
																				'assessment_id' => $achievement->assessment_id,
																				'project_id' => $row->project_id,
																				'max_vote' => $row->max_vote,
																				'user_vote' => $row->user_vote,
																				'assessment_type' => $row->assessment_type,
																				'submitted_time' => @$this->Submit_model->getSubmittedInfosByUserIdAndProjectId($row->user_id, $row->project_id)[0]->raw_time,
																			);
			}
		}

		foreach($results as $res_key => $achievements)
		{
			foreach ($achievements as $ach_key => $achievement)
			{
				foreach ($achievement as $typ_key => $type)
				{
					/**
					** Should be ordered by submission time TODO
					** 	this is a workaround, should be improved ASAP
					**/
					$this->load->helper('functions');
					$results[$res_key][$ach_key][$typ_key] = array_sort($type, 'submitted_time', 'SORT_DESC');
					/**
					** end of workaround
					**/

					$total_max = 0;
					$total_user = 0;
					$count = array();
					$c = 0;

					foreach ($results[$res_key][$ach_key][$typ_key] as $result)
					{
						//dump($result);
						$total_max += $result['max_vote'];
						$total_user += $result['user_vote'];

						$count[$result['project_id']] = TRUE;
					}
					$count = count($count);
					$percentage = @($total_user / $total_max * 100);
					$eligible = $this->Achievements_model->isEligible($percentage, $count, $typ_key);

					/* for dump debug only
					$results[$res_key][$ach_key][$typ_key] = array(
																	'number' 		=> $count,
																	'total_max'		=> $total_max,
																	'total_user'	=> $total_user,
																	'percentage'	=> $percentage,
																	'eligible'		=> $eligible
																	);
					*/

					if($eligible)
					{
						$eligible_users[] = array(
																	'user_id' 			=> $res_key,
																	'achievement_id'	=> $ach_key,
																	);
					}
				}
			}
		}

		foreach ($eligible_users as $u) {
			// finally, awards students
			$this->Achievements_model->award($u['user_id'], $u['achievement_id']);
		}
	}







}
